#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vulnerability Classifier for PhantomFuzzer.

This module provides functionality for classifying vulnerabilities
according to industry standards such as OWASP Top 10 and CWE.
"""

import os
import json
from pathlib import Path
from typing import Dict, List, Any, Optional, Union, Set, Tuple

# Import from phantomfuzzer package
from phantomfuzzer.utils.logging import get_module_logger
from phantomfuzzer.utils.helper import print_info, print_warning, print_error, print_success

# Import vulnerability constants
from phantomfuzzer.vulnerability import (
    # Severity levels
    SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_INFO,
    
    # Vulnerability categories
    CATEGORY_BROKEN_ACCESS_CONTROL, CATEGORY_CRYPTO_FAILURES, CATEGORY_INJECTION,
    CATEGORY_INSECURE_DESIGN, CATEGORY_SECURITY_MISCONFIG, CATEGORY_VULNERABLE_COMPONENTS,
    CATEGORY_AUTH_FAILURES, CATEGORY_SOFTWARE_DATA_INTEGRITY, CATEGORY_LOGGING_MONITORING,
    CATEGORY_SSRF
)

# Import vulnerability models
from phantomfuzzer.vulnerability.models import Vulnerability


class VulnerabilityClassifier:
    """Classifier for vulnerabilities found by PhantomFuzzer.
    
    This class handles classifying vulnerabilities according to industry
    standards such as OWASP Top 10 and CWE.
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """Initialize the vulnerability classifier.
        
        Args:
            config: Configuration parameters for the classifier.
        """
        self.logger = get_module_logger('vulnerability_classifier')
        self.config = config or {}
        
        # Load classification mappings
        self.mappings = self._load_mappings()
        
        self.logger.info("Vulnerability classifier initialized")
    
    def _load_mappings(self) -> Dict[str, Dict[str, Any]]:
        """Load classification mappings from configuration or default.
        
        Returns:
            Dictionary of classification mappings.
        """
        # Default mappings if not provided in config
        default_mappings = {
            # Map vulnerability types to OWASP Top 10 categories
            'owasp_top10': {
                'sql_injection': CATEGORY_INJECTION,
                'xss': CATEGORY_INJECTION,
                'command_injection': CATEGORY_INJECTION,
                'path_traversal': CATEGORY_BROKEN_ACCESS_CONTROL,
                'insecure_deserialization': CATEGORY_INSECURE_DESIGN,
                'xml_external_entity': CATEGORY_SECURITY_MISCONFIG,
                'open_redirect': CATEGORY_BROKEN_ACCESS_CONTROL,
                'csrf': CATEGORY_BROKEN_ACCESS_CONTROL,
                'broken_auth': CATEGORY_AUTH_FAILURES,
                'sensitive_info': CATEGORY_CRYPTO_FAILURES,
                'insecure_headers': CATEGORY_SECURITY_MISCONFIG,
                'outdated_component': CATEGORY_VULNERABLE_COMPONENTS,
                'missing_logging': CATEGORY_LOGGING_MONITORING,
                'ssrf': CATEGORY_SSRF
            },
            
            # Map vulnerability types to CWE IDs
            'cwe': {
                'sql_injection': 'CWE-89',
                'xss': 'CWE-79',
                'command_injection': 'CWE-77',
                'path_traversal': 'CWE-22',
                'insecure_deserialization': 'CWE-502',
                'xml_external_entity': 'CWE-611',
                'open_redirect': 'CWE-601',
                'csrf': 'CWE-352',
                'broken_auth': 'CWE-287',
                'sensitive_info': 'CWE-200',
                'insecure_headers': 'CWE-693',
                'outdated_component': 'CWE-1104',
                'missing_logging': 'CWE-778',
                'ssrf': 'CWE-918'
            }
        }
        
        # Use mappings from config if provided, otherwise use defaults
        return self.config.get('mappings', default_mappings)
