#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vulnerability Reporter for PhantomFuzzer.

This module provides functionality for generating vulnerability reports
in various formats, including text, JSON, HTML, and PDF.
"""

import os
import json
import time
import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Union, Set, Tuple

# Import from phantomfuzzer package
from phantomfuzzer.utils.logging import get_module_logger
from phantomfuzzer.utils.helper import print_info, print_warning, print_error, print_success

# Import vulnerability constants
from phantomfuzzer.vulnerability import (
    # Severity levels
    SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_INFO
)

# Import vulnerability models
from phantomfuzzer.vulnerability.models import Vulnerability


class VulnerabilityReporter:
    """Reporter for vulnerabilities found by PhantomFuzzer.
    
    This class handles generating reports in various formats for vulnerabilities
    detected by the PhantomFuzzer scanners.
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """Initialize the vulnerability reporter.
        
        Args:
            config: Configuration parameters for the reporter.
        """
        self.logger = get_module_logger('vulnerability_reporter')
        self.config = config or {}
        
        # Default configuration
        self.report_dir = self.config.get('report_dir', 'reports')
        self.report_formats = self.config.get('report_formats', ['text', 'json'])
        self.include_remediation = self.config.get('include_remediation', True)
        self.include_evidence = self.config.get('include_evidence', True)
        
        # Create report directory if it doesn't exist
        Path(self.report_dir).mkdir(parents=True, exist_ok=True)
        
        self.logger.info("Vulnerability reporter initialized")
    
    def generate_report(self, vulnerabilities: List[Vulnerability], 
                      target: str, scan_id: str, 
                      scan_time: Optional[datetime.datetime] = None) -> Dict[str, str]:
        """Generate vulnerability reports in the configured formats.
        
        Args:
            vulnerabilities: List of vulnerabilities to include in the report.
            target: The target that was scanned.
            scan_id: Unique identifier for the scan.
            scan_time: Time when the scan was performed.
            
        Returns:
            Dictionary mapping report formats to file paths.
        """
        report_files = {}
        
        # Use current time if scan_time is not provided
        if scan_time is None:
            scan_time = datetime.datetime.now()
            
        # Generate reports in each configured format
        for report_format in self.report_formats:
            if report_format == 'text':
                report_file = self._generate_text_report(vulnerabilities, target, scan_id, scan_time)
                report_files['text'] = report_file
            elif report_format == 'json':
                report_file = self._generate_json_report(vulnerabilities, target, scan_id, scan_time)
                report_files['json'] = report_file
            elif report_format == 'html':
                report_file = self._generate_html_report(vulnerabilities, target, scan_id, scan_time)
                report_files['html'] = report_file
            elif report_format == 'pdf':
                report_file = self._generate_pdf_report(vulnerabilities, target, scan_id, scan_time)
                report_files['pdf'] = report_file
                
        return report_files
