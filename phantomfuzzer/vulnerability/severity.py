#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vulnerability Severity Assessor for PhantomFuzzer.

This module provides functionality for assessing the severity of vulnerabilities
using industry standard scoring systems such as CVSS.
"""

import os
import json
import math
from pathlib import Path
from typing import Dict, List, Any, Optional, Union, Set, Tuple

# Import from phantomfuzzer package
from phantomfuzzer.utils.logging import get_module_logger
from phantomfuzzer.utils.helper import print_info, print_warning, print_error, print_success

# Import vulnerability constants
from phantomfuzzer.vulnerability import (
    # Severity levels
    SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_INFO
)

# Import vulnerability models
from phantomfuzzer.vulnerability.models import Vulnerability


class SeverityAssessor:
    """Assessor for vulnerability severity in PhantomFuzzer.
    
    This class handles assessing the severity of vulnerabilities using
    industry standard scoring systems such as CVSS.
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """Initialize the severity assessor.
        
        Args:
            config: Configuration parameters for the assessor.
        """
        self.logger = get_module_logger('severity_assessor')
        self.config = config or {}
        
        # Default configuration
        self.scoring_system = self.config.get('scoring_system', 'cvss')
        self.cvss_version = self.config.get('cvss_version', '3.1')
        
        # Load severity mappings
        self.mappings = self._load_mappings()
        
        self.logger.info("Severity assessor initialized")
    
    def _load_mappings(self) -> Dict[str, Dict[str, Any]]:
        """Load severity mappings from configuration or default.
        
        Returns:
            Dictionary of severity mappings.
        """
        # Default mappings if not provided in config
        default_mappings = {
            # Map vulnerability types to default CVSS scores
            'cvss': {
                'sql_injection': 8.5,  # High
                'xss': 6.5,  # Medium
                'command_injection': 9.0,  # Critical
                'path_traversal': 7.5,  # High
                'insecure_deserialization': 8.0,  # High
                'xml_external_entity': 7.5,  # High
                'open_redirect': 5.5,  # Medium
                'csrf': 6.0,  # Medium
                'broken_auth': 8.0,  # High
                'sensitive_info': 7.0,  # High
                'insecure_headers': 5.0,  # Medium
                'outdated_component': 6.5,  # Medium
                'missing_logging': 4.0,  # Medium
                'ssrf': 7.0  # High
            },
            
            # Map CVSS scores to severity levels
            'cvss_to_severity': {
                'critical': (9.0, 10.0),
                'high': (7.0, 8.9),
                'medium': (4.0, 6.9),
                'low': (1.0, 3.9),
                'info': (0.0, 0.9)
            }
        }
        
        # Use mappings from config if provided, otherwise use defaults
        return self.config.get('mappings', default_mappings)
    
    def assess_severity(self, vulnerability: Vulnerability) -> str:
        """Assess the severity of a vulnerability.
        
        Args:
            vulnerability: The vulnerability to assess.
            
        Returns:
            The severity level (one of the SEVERITY_* constants).
        """
        # If severity is already set, return it
        if vulnerability.severity and vulnerability.severity in [
            SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_INFO
        ]:
            return vulnerability.severity
        
        # If CVSS score is provided, use it to determine severity
        if vulnerability.cvss_score is not None:
            return self._cvss_to_severity(vulnerability.cvss_score)
        
        # Otherwise, determine severity based on vulnerability type
        vuln_type = vulnerability.name.lower()
        for key in self.mappings['cvss']:
            if key in vuln_type:
                cvss_score = self.mappings['cvss'][key]
                return self._cvss_to_severity(cvss_score)
        
        # Default to medium if no mapping is found
        return SEVERITY_MEDIUM
    
    def _cvss_to_severity(self, cvss_score: float) -> str:
        """Convert a CVSS score to a severity level.
        
        Args:
            cvss_score: The CVSS score (0.0-10.0).
            
        Returns:
            The severity level (one of the SEVERITY_* constants).
        """
        for severity, (min_score, max_score) in self.mappings['cvss_to_severity'].items():
            if min_score <= cvss_score <= max_score:
                if severity == 'critical':
                    return SEVERITY_CRITICAL
                elif severity == 'high':
                    return SEVERITY_HIGH
                elif severity == 'medium':
                    return SEVERITY_MEDIUM
                elif severity == 'low':
                    return SEVERITY_LOW
                elif severity == 'info':
                    return SEVERITY_INFO
        
        # Default to medium if no mapping is found
        return SEVERITY_MEDIUM
