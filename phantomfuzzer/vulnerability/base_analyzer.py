#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Base vulnerability analyzer for PhantomFuzzer.

This module provides the abstract base class for all vulnerability analyzers.
"""

import json
from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional, Union

# Import from phantomfuzzer package
from phantomfuzzer.utils.logging import get_module_logger
from phantomfuzzer.utils.helper import print_info, print_warning, print_error, print_success

# Import from vulnerability module
from phantomfuzzer.vulnerability.models import Vulnerability


class BaseAnalyzer(ABC):
    """Abstract base class for vulnerability analyzers.
    
    This class defines the interface that all analyzer implementations must follow,
    as well as common functionality for configuration, logging, and pattern handling.
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """Initialize the base analyzer.
        
        Args:
            config: Optional configuration dictionary.
        """
        self.logger = get_module_logger(self.__class__.__name__.lower())
        self.config = config or {}
        
        # Initialize patterns
        self.patterns = self._load_patterns()
        
        # Initialize ML integration if available and enabled
        self.ml_enabled = self.config.get('ml_enabled', False)
        self.ml_integration = None
        
        if self.ml_enabled:
            self._init_ml_integration()
    
    def _init_ml_integration(self) -> None:
        """Initialize ML integration if available."""
        try:
            from phantomfuzzer.ml import MLIntegration
            self.ml_integration = MLIntegration()
            self.logger.info("ML integration initialized for vulnerability analysis")
            print_info("ML integration initialized for vulnerability analysis")
        except ImportError:
            self.logger.warning("ML integration not available")
            print_warning("ML integration not available for vulnerability analysis")
            self.ml_enabled = False
    
    @abstractmethod
    def _load_patterns(self) -> Dict[str, Any]:
        """Load vulnerability patterns.
        
        This method should be implemented by subclasses to load patterns
        specific to the type of analysis they perform.
        
        Returns:
            A dictionary of vulnerability patterns.
        """
        pass
    
    @abstractmethod
    def analyze(self, target: Any, scan_context: Optional[Dict[str, Any]] = None) -> List[Vulnerability]:
        """Analyze a target for vulnerabilities.
        
        This method should be implemented by subclasses to perform
        analysis specific to the type of target they handle.
        
        Args:
            target: The target to analyze.
            scan_context: Optional context information about the scan.
        
        Returns:
            A list of detected vulnerabilities.
        """
        pass
    
    def _handle_exception(self, e: Exception, message: str) -> None:
        """Handle exceptions in a consistent way.
        
        Args:
            e: The exception that was raised.
            message: A message describing what was happening when the exception occurred.
        """
        self.logger.error(f"{message}: {str(e)}")
        print_error(f"{message}: {str(e)}")
